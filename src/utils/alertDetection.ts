
import { Alert, Vehicle } from "@/types";
import { supabase } from "@/lib/supabase";

// Thresholds for various alert conditions
const SPEED_THRESHOLD = 120; // km/h
const ACCELERATION_THRESHOLD = 3.0; // m/s²
const HILL_ANGLE_THRESHOLD = 15; // degrees

/**
 * Processes vehicle position data to detect alert conditions
 * @param vehicleId The ID of the vehicle
 * @param positionData The vehicle position data to analyze
 * @returns Alert if condition detected, null otherwise
 */
export async function detectAlerts(
  vehicleId: string, 
  positionData: {
    latitude: number;
    longitude: number;
    speed?: number | null;
    accel_x?: number | null;
    accel_y?: number | null;
    accel_z?: number | null;
    pitch?: number | null;
    roll?: number | null;
  }
): Promise<Alert | null> {
  // Skip processing if no telemetry data
  if (!positionData.speed && !positionData.pitch && !positionData.roll && 
      !positionData.accel_x && !positionData.accel_y && !positionData.accel_z) {
    return null;
  }

  // Check vehicle data
  const { data: vehicle, error: vehicleError } = await supabase
    .from('vehicles')
    .select('plate_number')
    .eq('id', vehicleId)
    .single();

  if (vehicleError || !vehicle) {
    console.error("Error fetching vehicle data:", vehicleError);
    return null;
  }

  const plateNumber = vehicle.plate_number;

  // Check for speeding
  if (positionData.speed && positionData.speed > SPEED_THRESHOLD) {
    return {
      id: '', // Will be generated by the database
      vehicle_id: vehicleId,
      type: 'speeding',
      description: `Vehicle ${plateNumber} detected speeding at ${positionData.speed.toFixed(1)} km/h`,
      timestamp: new Date().toISOString()
    };
  }

  // Check for steep hill or incline
  if ((positionData.pitch && Math.abs(positionData.pitch) > HILL_ANGLE_THRESHOLD) || 
      (positionData.roll && Math.abs(positionData.roll) > HILL_ANGLE_THRESHOLD)) {
    const pitchAngle = positionData.pitch || 0;
    const rollAngle = positionData.roll || 0;
    const direction = pitchAngle > 0 ? "ascending" : "descending";
    
    return {
      id: '', // Will be generated by the database
      vehicle_id: vehicleId,
      type: 'terrain',
      description: `Vehicle ${plateNumber} on steep terrain (${direction}). Pitch: ${pitchAngle.toFixed(1)}°, Roll: ${rollAngle.toFixed(1)}°`,
      timestamp: new Date().toISOString()
    };
  }

  // Check for sudden acceleration/deceleration
  const accelMagnitude = Math.sqrt(
    Math.pow(positionData.accel_x || 0, 2) + 
    Math.pow(positionData.accel_y || 0, 2) + 
    Math.pow(positionData.accel_z || 0, 2)
  );

  if (accelMagnitude > ACCELERATION_THRESHOLD) {
    return {
      id: '', // Will be generated by the database
      vehicle_id: vehicleId,
      type: 'driving',
      description: `Vehicle ${plateNumber} experienced sudden movement. Acceleration: ${accelMagnitude.toFixed(2)} m/s²`,
      timestamp: new Date().toISOString()
    };
  }

  // No alert conditions detected
  return null;
}

/**
 * Creates an alert in the database if it doesn't already exist
 * (avoids duplicate alerts for the same condition in a short time period)
 */
export async function createAlert(alert: Alert): Promise<void> {
  // Check for similar recent alerts to avoid duplicates
  const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000).toISOString();
  
  const { data: existingAlerts } = await supabase
    .from('alerts')
    .select('*')
    .eq('vehicle_id', alert.vehicle_id)
    .eq('type', alert.type)
    .gte('timestamp', fiveMinutesAgo);

  // If no similar alert exists in the last 5 minutes, create one
  if (!existingAlerts || existingAlerts.length === 0) {
    await supabase
      .from('alerts')
      .insert(alert);
  }
}
